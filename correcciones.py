import streamlit as st
import stripe
import os
from io import BytesIO
import requests
import jwt
import datetime
from textwrap import dedent
from docx import Document
from docx.shared import Pt, RGBColor
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
import re

# -------------------------------
# Funci칩n para crear el archivo DOCX
# -------------------------------
def create_docx(analysis, correction):
    """
    Crea un archivo DOCX con el an치lisis literario y la correcci칩n de estilo.

    Args:
        analysis (str): Texto del an치lisis literario.
        correction (str): Texto de la correcci칩n con justificaciones.

    Returns:
        BytesIO: Objeto BytesIO con el contenido del DOCX.
    """
    document = Document()

    # T칤tulo del Documento
    title = document.add_heading('An치lisis Literario y Correcci칩n de Estilo', level=1)
    title.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

    # Secci칩n de An치lisis Literario
    document.add_heading('游늯 An치lisis Literario', level=2)
    document.add_paragraph(analysis)

    # Secci칩n de Correcci칩n de Estilo
    document.add_heading('九꽲잺 Correcci칩n de Estilo, Ortogr치fica, Gramatical y de Puntuaci칩n con Justificaciones', level=2)
    
    # Procesar el texto de correcci칩n para separar cambios y justificaciones
    pattern = re.compile(r'(.*?)\[(.*?)\]', re.DOTALL)
    matches = pattern.findall(correction)

    for original, justification in matches:
        para = document.add_paragraph()
        run_original = para.add_run(original)
        run_original.font.size = Pt(12)

        run_justification = para.add_run(f"[{justification}]")
        run_justification.font.size = Pt(12)
        run_justification.font.color.rgb = RGBColor(255, 0, 0)  # Rojo

    # Manejar cualquier texto que no coincida con el patr칩n
    non_matched_text = pattern.sub('', correction)
    if non_matched_text.strip():
        document.add_paragraph(non_matched_text)

    # Guardar el documento en un objeto BytesIO
    docx_io = BytesIO()
    document.save(docx_io)
    docx_io.seek(0)

    return docx_io

# -------------------------------
# Configuraci칩n de la p치gina
# -------------------------------
st.set_page_config(
    page_title="An치lisis Literario y Correcci칩n de Estilo",
    layout="wide",
    initial_sidebar_state="expanded",
)

# T칤tulo de la aplicaci칩n
st.title("游댌 An치lisis Literario y Correcci칩n de Estilo")

# Configurar la clave secreta de Stripe
stripe.api_key = st.secrets["STRIPE_SECRET_KEY"]

# ID del producto en Stripe
PRODUCT_ID = "prod_QwZPXT67PV3srt"  # Reemplaza con tu ID de producto real

# Obtener el secreto JWT de Streamlit secrets
JWT_SECRET = st.secrets["JWT_SECRET"]

# Funci칩n para generar un token JWT
def generate_jwt_token():
    payload = {
        "payment": "completed",
        "exp": datetime.datetime.utcnow() + datetime.timedelta(minutes=30)
    }
    token = jwt.encode(payload, JWT_SECRET, algorithm="HS256")
    return token

# Funci칩n para verificar el token JWT
def verify_jwt_token(token):
    try:
        payload = jwt.decode(token, JWT_SECRET, algorithms=["HS256"])
        if payload.get("payment") == "completed":
            return True
        return False
    except jwt.ExpiredSignatureError:
        st.error("El token ha expirado.")
        return False
    except jwt.InvalidTokenError:
        st.error("Token inv치lido.")
        return False

# Funci칩n para obtener el precio del producto
def get_price_for_product(product_id):
    try:
        prices = stripe.Price.list(product=product_id)
        if prices and prices['data']:
            return prices['data'][0].id
        else:
            st.error("No se encontraron precios para el producto.")
            return None
    except Exception as e:
        st.error(f"Error al recuperar el precio: {e}")
        return None

# Funci칩n para crear una sesi칩n de pago en Stripe
def create_checkout_session(price_id):
    try:
        token = generate_jwt_token()
        session = stripe.checkout.Session.create(
            payment_method_types=["card"],
            line_items=[{
                "price": price_id,
                "quantity": 1,
            }],
            mode="payment",
            success_url=f"{st.secrets['APP_URL']}?token={token}",
            cancel_url=f"{st.secrets['APP_URL']}?cancel=true",
        )
        return session
    except Exception as e:
        st.error(f"Error al crear la sesi칩n de pago: {e}")
        return None

# -------------------------------
# Sidebar Instructions
# -------------------------------
st.sidebar.header("Instrucciones")
st.sidebar.markdown("""
**Esta aplicaci칩n te permite:**

- Realizar un an치lisis literario detallado de tu texto.
- Obtener recomendaciones de estilo espec칤ficas.
- Descargar una versi칩n corregida de tu texto con justificaciones de los cambios realizados.

**Proceso:**

1. **Pagar por el servicio:** Una tarifa 칰nica de 9 USD.
2. **Subir tu texto:** M치ximo 2000 palabras.
3. **Recibir an치lisis y correcci칩n.**

**Aviso legal:**

Es responsabilidad del usuario verificar todos los cambios antes de utilizar el documento corregido.
""")

# -------------------------------
# Payment Handling
# -------------------------------

# Obtener par치metros de consulta
query_params = st.experimental_get_query_params()
token = query_params.get("token")
cancel = query_params.get("cancel")

if cancel:
    st.warning("El pago fue cancelado. Puedes intentarlo nuevamente.")

# Verificar si el usuario ya ha pagado
if token and verify_jwt_token(token[0]):
    st.success("춰Pago completado! Ahora puedes usar la aplicaci칩n.")
    acceso_concedido = True
else:
    acceso_concedido = False
    st.warning("Debes completar el pago antes de usar la aplicaci칩n.")

    if st.button("Pagar con Stripe"):
        price_id = get_price_for_product(PRODUCT_ID)
        if price_id:
            session = create_checkout_session(price_id)
            if session:
                st.markdown(f"[Proceder al pago]({session.url})", unsafe_allow_html=True)

# -------------------------------
# Literary Analysis and Correction
# -------------------------------

if acceso_concedido:
    st.header("游늯 An치lisis Literario y Correcci칩n de Estilo")

    # Formulario de entrada
    with st.form(key='literary_analysis_form'):
        # 츼rea de texto para el contenido
        text_input = st.text_area(
            "Pega tu texto (m치ximo 2000 palabras):",
            height=300,
            help="Aseg칰rate de que tu texto no exceda las 2000 palabras."
        )

        # Selecci칩n de g칠nero
        genre = st.selectbox(
            "Selecciona el g칠nero:",
            options=[
                "Fantas칤a", "Ciencia Ficci칩n", "Misterio", "Romance",
                "Terror", "Aventura", "Drama", "Hist칩rico", "Otro"
            ]
        )

        # Entrada de audiencia
        audience = st.text_input(
            "Define la audiencia:",
            help="Por ejemplo: adolescentes, adultos j칩venes, adultos, etc."
        )

        # Bot칩n de env칤o
        submit_button = st.form_submit_button(label='Analizar y Corregir')

    # Funci칩n para contar palabras
    def count_words(text):
        return len(text.split())

    # Funci칩n para llamar a la API de Together para An치lisis Literario
    def call_together_api_analysis(api_key, genre, audience, text):
        url = "https://api.together.xyz/v1/chat/completions"
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }

        # Construcci칩n de los mensajes para la API con instrucciones claras y espec칤ficas
        messages = [
            {
                "role": "system",
                "content": dedent("""
                    Eres un cr칤tico literario experto que proporciona an치lisis detallados y recomendaciones de estilo basadas en el g칠nero y la audiencia especificados.
                    **No debes corregir, modificar ni repetir el texto proporcionado.**
                    Tu 칰nica tarea es analizar el texto y ofrecer sugerencias de mejora enfocadas en aspectos literarios espec칤ficos como temas, desarrollo de personajes, estructura narrativa, tono y estilo.
                """)
            },
            {
                "role": "user",
                "content": dedent(f"""
                    Por favor, analiza el siguiente texto y proporciona una cr칤tica literaria junto con recomendaciones de estilo espec칤ficas.

                    **Instrucciones adicionales:**
                    - No repitas el an치lisis previamente proporcionado.
                    - No corrijas ni modifiques el texto original de ninguna manera.
                    - Enf칩cate 칰nicamente en proporcionar observaciones, cr칤ticas constructivas y sugerencias de mejora relacionadas directamente con el contenido del texto.
                    - Preserva todos los hiperv칤nculos existentes en el texto. No agregues nuevos hiperv칤nculos a menos que sean necesarios.
                    - No alteres las URLs de los hiperv칤nculos existentes.
                    - Organiza el an치lisis en secciones claras como **Temas**, **Desarrollo de Personajes**, **Estructura Narrativa**, **Estilo y Tono**, etc.

                    **G칠nero:** {genre}
                    **Audiencia:** {audience}

                    **Texto:**
                    {text}
                """)
            }
        ]

        payload = {
            "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
            "messages": messages,
            "max_tokens": 2000,  # Ajusta seg칰n tus necesidades y l칤mites de la API
            "temperature": 0.5,  # Reducida para respuestas m치s enfocadas
            "top_p": 0.7,
            "top_k": 50,
            "repetition_penalty": 1,
            "stop": ["<|eot_id|>"],
            "stream": False  # Mantener como False para simplificar
        }

        try:
            response = requests.post(url, headers=headers, data=json.dumps(payload))
            response.raise_for_status()  # Esto lanzar치 una excepci칩n si hay un error HTTP
            return response.json()
        except requests.exceptions.RequestException as e:
            st.error(f"Error al comunicarse con la API de An치lisis: {e}")
            return None

    # Funci칩n para llamar a la API de Together para Correcci칩n de Estilo y Ortograf칤a con Justificaciones Inline
    def call_together_api_style_correction_with_justifications(api_key, analysis, text):
        url = "https://api.together.xyz/v1/chat/completions"
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }

        # Construcci칩n de los mensajes para la API con instrucciones claras y espec칤ficas
        messages = [
            {
                "role": "system",
                "content": dedent("""
                    Eres un editor experto en correcci칩n de estilo, ortograf칤a, gram치tica y puntuaci칩n que revisa textos literarios.
                    **No debes realizar cambios que alteren el contenido original del autor.**
                    Tu tarea es corregir el estilo, ortograf칤a, gram치tica y puntuaci칩n del texto proporcionado basado en el an치lisis y las recomendaciones previas.
                    **Preserva todos los hiperv칤nculos existentes en el texto. No agregues nuevos hiperv칤nculos a menos que sean necesarios. No alteres las URLs de los hiperv칤nculos existentes.**
                    **Despu칠s de cada cambio realizado, a침ade una justificaci칩n entre corchetes y en color rojo.**
                """)
            },
            {
                "role": "user",
                "content": dedent(f"""
                    Basado en el siguiente an치lisis y recomendaciones, realiza una correcci칩n de estilo del texto proporcionado. Incluye tambi칠n correcciones ortogr치ficas, gramaticales y de puntuaci칩n. Despu칠s de cada cambio realizado, a침ade una justificaci칩n entre corchetes y estilizada en color rojo.

                    **An치lisis y Recomendaciones:**
                    {analysis}

                    **Texto Original:**
                    {text}

                    **Instrucciones adicionales:**
                    - No corrijas ni modifiques el contenido del texto.
                    - Enf칩cate 칰nicamente en mejorar la claridad, el flujo, el estilo, la ortograf칤a, la gram치tica y la puntuaci칩n.
                    - Preserva todos los hiperv칤nculos existentes en el texto. No agregues nuevos hiperv칤nculos a menos que sean necesarios.
                    - No alteres las URLs de los hiperv칤nculos existentes.
                    - Para cada cambio realizado, proporciona una justificaci칩n detallada entre corchetes y estilizada en color rojo.
                    - Presenta el texto corregido con las justificaciones inline.
                """)
            }
        ]

        payload = {
            "model": "mistralai/Mixtral-8x7B-Instruct-v0.1",
            "messages": messages,
            "max_tokens": 3000,  # Aumentado para acomodar justificaciones
            "temperature": 0.5,  # Reducida para respuestas m치s enfocadas
            "top_p": 0.7,
            "top_k": 50,
            "repetition_penalty": 1,
            "stop": ["<|eot_id|>"],
            "stream": False  # Mantener como False para simplificar
        }

        try:
            response = requests.post(url, headers=headers, data=json.dumps(payload))
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            st.error(f"Error al comunicarse con la API de Correcci칩n de Estilo: {e}")
            return None

    # Acci칩n al enviar el formulario
    if submit_button:
        # Validaci칩n de entrada
        if not text_input.strip():
            st.error("Por favor, pega tu texto para analizar y corregir.")
        elif not audience.strip():
            st.error("Por favor, define la audiencia.")
        else:
            word_count = count_words(text_input)
            if word_count > 2000:
                st.error(f"El texto excede el l칤mite de 2000 palabras. Actualmente tiene {word_count} palabras.")
            else:
                # Mostrar spinner mientras se procesa la solicitud
                with st.spinner("Procesando tu solicitud..."):
                    # Obtener la API Key desde los secretos
                    try:
                        api_key = st.secrets["TOGETHER_API_KEY"]
                    except KeyError:
                        st.error("La clave de la API no est치 configurada correctamente en los secrets.")
                        st.stop()

                    # Primera llamada a la API para An치lisis Literario
                    api_response_analysis = call_together_api_analysis(api_key, genre, audience, text_input)

                    if api_response_analysis:
                        # Extraer la respuesta del modelo para el an치lisis
                        try:
                            analysis = api_response_analysis['choices'][0]['message']['content']
                            st.subheader("游늯 An치lisis Literario")
                            st.write(analysis)
                        except (KeyError, IndexError):
                            st.error("Respuesta inesperada de la API de An치lisis.")
                            analysis = None

                    # Segunda llamada a la API para Correcci칩n de Estilo y Ortograf칤a con Justificaciones Inline, si el an치lisis fue exitoso
                    if analysis:
                        api_response_correction = call_together_api_style_correction_with_justifications(api_key, analysis, text_input)

                        if api_response_correction:
                            # Extraer la respuesta del modelo para la correcci칩n de estilo con justificaciones
                            try:
                                correction = api_response_correction['choices'][0]['message']['content']
                                st.subheader("九꽲잺 Correcci칩n de Estilo, Ortogr치fica, Gramatical y de Puntuaci칩n con Justificaciones")
                                # Renderizar el texto corregido con justificaciones en rojo
                                # Aseg칰rate de que la respuesta de la API est칠 formateada en Markdown con HTML para estilos
                                st.markdown(correction, unsafe_allow_html=True)
                            except (KeyError, IndexError):
                                st.error("Respuesta inesperada de la API de Correcci칩n de Estilo.")

                            # Crear el archivo DOCX
                            docx_file = create_docx(analysis, correction)

                            # Proporcionar el bot칩n de descarga
                            st.download_button(
                                label="游닌 Descargar An치lisis y Correcci칩n (DOCX)",
                                data=docx_file,
                                file_name="Analisis_y_Correcion.docx",
                                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                            )

    # -------------------------------
    # Optional: Reset Query Parameters
    # -------------------------------

    # Limpiar los par치metros de consulta despu칠s de procesar
    if acceso_concedido and (token or cancel):
        st.experimental_set_query_params()
