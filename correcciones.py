import streamlit as st
import requests
import json  
from textwrap import dedent

# Configuraci칩n de la p치gina
st.set_page_config(
    page_title="An치lisis Literario y Correcci칩n de Estilo",
    layout="wide",
    initial_sidebar_state="expanded",
)

# T칤tulo de la aplicaci칩n
st.title("游댌 An치lisis Literario y Correcci칩n de Estilo")

# Instrucciones
st.markdown("""
Bienvenido a la herramienta de an치lisis literario y correcci칩n de estilo. Por favor, completa los campos a continuaci칩n para obtener una cr칤tica literaria detallada, recomendaciones de estilo espec칤ficas y una versi칩n corregida de tu texto con justificaciones de los cambios realizados.
""")

# Formulario de entrada
with st.form(key='literary_analysis_form'):
    # 츼rea de texto para el contenido
    text_input = st.text_area(
        "Pega tu texto (m치ximo 2000 palabras):",
        height=300,
        help="Aseg칰rate de que tu texto no exceda las 2000 palabras."
    )

    # Selecci칩n de g칠nero
    genre = st.selectbox(
        "Selecciona el g칠nero:",
        options=[
            "Fantas칤a", "Ciencia Ficci칩n", "Misterio", "Romance",
            "Terror", "Aventura", "Drama", "Hist칩rico", "Otro"
        ]
    )

    # Entrada de audiencia
    audience = st.text_input(
        "Define la audiencia:",
        help="Por ejemplo: adolescentes, adultos j칩venes, adultos, etc."
    )

    # Bot칩n de env칤o
    submit_button = st.form_submit_button(label='Analizar y Corregir')

# Funci칩n para contar palabras
def count_words(text):
    return len(text.split())

# Funci칩n para llamar a la API de Together para An치lisis Literario
def call_together_api_analysis(api_key, genre, audience, text):
    url = "https://api.together.xyz/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }

    # Construcci칩n de los mensajes para la API con instrucciones claras y espec칤ficas
    messages = [
        {
            "role": "system",
            "content": dedent("""
                Eres un cr칤tico literario experto que proporciona an치lisis detallados y recomendaciones de estilo basadas en el g칠nero y la audiencia especificados.
                **No debes corregir, modificar ni repetir el texto proporcionado.**
                Tu 칰nica tarea es analizar el texto y ofrecer sugerencias de mejora enfocadas en aspectos literarios espec칤ficos como temas, desarrollo de personajes, estructura narrativa, tono y estilo.
            """)
        },
        {
            "role": "user",
            "content": dedent(f"""
                Por favor, analiza el siguiente texto y proporciona una cr칤tica literaria junto con recomendaciones de estilo espec칤ficas.

                **Instrucciones adicionales:**
                - No repitas el an치lisis previamente proporcionado.
                - No corrijas ni modifiques el texto original de ninguna manera.
                - Enf칩cate 칰nicamente en proporcionar observaciones, cr칤ticas constructivas y sugerencias de mejora relacionadas directamente con el contenido del texto.
                - Preserva todos los hiperv칤nculos existentes en el texto. No agregues nuevos hiperv칤nculos a menos que sean necesarios.
                - No alteres las URLs de los hiperv칤nculos existentes.
                - Organiza el an치lisis en secciones claras como **Temas**, **Desarrollo de Personajes**, **Estructura Narrativa**, **Estilo y Tono**, etc.

                **G칠nero:** {genre}
                **Audiencia:** {audience}

                **Texto:**
                {text}
            """)
        }
    ]

    payload = {
        "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
        "messages": messages,
        "max_tokens": 2000,  # Ajusta seg칰n tus necesidades y l칤mites de la API
        "temperature": 0.5,  # Reducida para respuestas m치s enfocadas
        "top_p": 0.7,
        "top_k": 50,
        "repetition_penalty": 1,
        "stop": ["<|eot_id|>"],
        "stream": False  # Mantener como False para simplificar
    }

    try:
        response = requests.post(url, headers=headers, data=json.dumps(payload))
        response.raise_for_status()  # Esto lanzar치 una excepci칩n si hay un error HTTP
        return response.json()
    except requests.exceptions.RequestException as e:
        st.error(f"Error al comunicarse con la API de An치lisis: {e}")
        return None

# Funci칩n para llamar a la API de Together para Correcci칩n de Estilo y Ortograf칤a con Justificaciones Inline
def call_together_api_style_correction_with_justifications(api_key, analysis, text):
    url = "https://api.together.xyz/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }

    # Construcci칩n de los mensajes para la API con instrucciones claras y espec칤ficas
    messages = [
        {
            "role": "system",
            "content": dedent("""
                Eres un editor experto en correcci칩n de estilo, ortograf칤a, gram치tica y puntuaci칩n que revisa textos literarios.
                **No debes realizar cambios que alteren el contenido original del autor.**
                Tu tarea es corregir el estilo, ortograf칤a, gram치tica y puntuaci칩n del texto proporcionado basado en el an치lisis y las recomendaciones previas.
                **Preserva todos los hiperv칤nculos existentes en el texto. No agregues nuevos hiperv칤nculos a menos que sean necesarios. No alteres las URLs de los hiperv칤nculos existentes.**
                **Despu칠s de cada cambio realizado, a침ade una justificaci칩n entre corchetes y en color rojo.**
            """)
        },
        {
            "role": "user",
            "content": dedent(f"""
                Basado en el siguiente an치lisis y recomendaciones, realiza una correcci칩n de estilo del texto proporcionado. Incluye tambi칠n correcciones ortogr치ficas, gramaticales y de puntuaci칩n. Despu칠s de cada cambio realizado, a침ade una justificaci칩n entre corchetes y en color rojo.

                **An치lisis y Recomendaciones:**
                {analysis}

                **Texto Original:**
                {text}

                **Instrucciones adicionales:**
                - No corrijas ni modifiques el contenido del texto.
                - Enf칩cate 칰nicamente en mejorar la claridad, el flujo, el estilo, la ortograf칤a, la gram치tica y la puntuaci칩n.
                - Preserva todos los hiperv칤nculos existentes en el texto. No agregues nuevos hiperv칤nculos a menos que sean necesarios.
                - No alteres las URLs de los hiperv칤nculos existentes.
                - Para cada cambio realizado, proporciona una justificaci칩n detallada entre corchetes y estilizada en color rojo.
                - Presenta el texto corregido con las justificaciones inline.
            """)
        }
    ]

    payload = {
        "model": "mistralai/Mixtral-8x7B-Instruct-v0.1",
        "messages": messages,
        "max_tokens": 3000,  # Aumentado para acomodar justificaciones
        "temperature": 0.5,  # Reducida para respuestas m치s enfocadas
        "top_p": 0.7,
        "top_k": 50,
        "repetition_penalty": 1,
        "stop": ["<|eot_id|>"],
        "stream": False  # Mantener como False para simplificar
    }

    try:
        response = requests.post(url, headers=headers, data=json.dumps(payload))
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        st.error(f"Error al comunicarse con la API de Correcci칩n de Estilo: {e}")
        return None

# Acci칩n al enviar el formulario
if submit_button:
    # Validaci칩n de entrada
    if not text_input.strip():
        st.error("Por favor, pega tu texto para analizar y corregir.")
    elif not audience.strip():
        st.error("Por favor, define la audiencia.")
    else:
        word_count = count_words(text_input)
        if word_count > 2000:
            st.error(f"El texto excede el l칤mite de 2000 palabras. Actualmente tiene {word_count} palabras.")
        else:
            # Mostrar spinner mientras se procesa la solicitud
            with st.spinner("Procesando tu solicitud..."):
                # Obtener la API Key desde los secretos
                try:
                    api_key = st.secrets["TOGETHER_API_KEY"]
                except KeyError:
                    st.error("La clave de la API no est치 configurada correctamente en los secrets.")
                    st.stop()

                # Primera llamada a la API para An치lisis Literario
                api_response_analysis = call_together_api_analysis(api_key, genre, audience, text_input)

                if api_response_analysis:
                    # Extraer la respuesta del modelo para el an치lisis
                    try:
                        analysis = api_response_analysis['choices'][0]['message']['content']
                        st.subheader("游늯 An치lisis Literario")
                        st.write(analysis)
                    except (KeyError, IndexError):
                        st.error("Respuesta inesperada de la API de An치lisis.")
                        analysis = None

                # Segunda llamada a la API para Correcci칩n de Estilo y Ortograf칤a con Justificaciones Inline, si el an치lisis fue exitoso
                if analysis:
                    api_response_correction = call_together_api_style_correction_with_justifications(api_key, analysis, text_input)

                    if api_response_correction:
                        # Extraer la respuesta del modelo para la correcci칩n de estilo con justificaciones
                        try:
                            correction = api_response_correction['choices'][0]['message']['content']
                            st.subheader("九꽲잺 Correcci칩n de Estilo, Ortogr치fica, Gramatical y de Puntuaci칩n con Justificaciones")
                            # Renderizar el texto corregido con justificaciones en rojo
                            st.markdown(correction, unsafe_allow_html=True)
                        except (KeyError, IndexError):
                            st.error("Respuesta inesperada de la API de Correcci칩n de Estilo.")
